diff --git a/include/config/libinput.h b/include/config/libinput.h
index 61505b1..1cd760a 100644
--- a/include/config/libinput.h
+++ b/include/config/libinput.h
@@ -2,6 +2,7 @@
 #ifndef LABWC_LIBINPUT_H
 #define LABWC_LIBINPUT_H
 
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 #include <libinput.h>
 #include <string.h>
 #include <wayland-server-core.h>
@@ -31,5 +32,6 @@ struct libinput_category {
 enum device_type get_device_type(const char *s);
 struct libinput_category *libinput_category_create(void);
 struct libinput_category *libinput_category_get_default(void);
+#endif
 
 #endif /* LABWC_LIBINPUT_H */
diff --git a/include/labwc.h b/include/labwc.h
index aef85f1..6e64274 100644
--- a/include/labwc.h
+++ b/include/labwc.h
@@ -35,7 +35,9 @@
 #include <wlr/types/wlr_xcursor_manager.h>
 #include <wlr/types/wlr_xdg_activation_v1.h>
 #include <wlr/types/wlr_xdg_shell.h>
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 #include <wlr/types/wlr_drm_lease_v1.h>
+#endif
 #include <wlr/types/wlr_virtual_pointer_v1.h>
 #include <wlr/types/wlr_virtual_keyboard_v1.h>
 #include <wlr/util/log.h>
@@ -293,8 +295,10 @@ struct server {
 
 	struct wlr_foreign_toplevel_manager_v1 *foreign_toplevel_manager;
 
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	struct wlr_drm_lease_v1_manager *drm_lease_manager;
 	struct wl_listener drm_lease_request;
+#endif
 
 	struct wlr_output_power_manager_v1 *output_power_manager_v1;
 	struct wl_listener output_power_manager_set_mode;
diff --git a/meson.build b/meson.build
index 54b1755..2bf08da 100644
--- a/meson.build
+++ b/meson.build
@@ -67,7 +67,7 @@ xml2 = dependency('libxml-2.0')
 glib = dependency('glib-2.0')
 cairo = dependency('cairo')
 pangocairo = dependency('pangocairo')
-input = dependency('libinput', version: '>=1.14')
+input = dependency('libinput', required: false, version: '>=1.14')
 math = cc.find_library('m')
 png = dependency('libpng')
 svg = dependency('librsvg-2.0', version: '>=2.46', required: false)
diff --git a/src/config/libinput.c b/src/config/libinput.c
index e66060a..6092a55 100644
--- a/src/config/libinput.c
+++ b/src/config/libinput.c
@@ -1,4 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0-only
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 #include <string.h>
 #include <strings.h>
 
@@ -62,3 +63,4 @@ libinput_category_get_default(void)
 	}
 	return NULL;
 }
+#endif
diff --git a/src/config/rcxml.c b/src/config/rcxml.c
index ed4c184..da77e29 100644
--- a/src/config/rcxml.c
+++ b/src/config/rcxml.c
@@ -23,7 +23,9 @@
 #include "common/parse-bool.h"
 #include "common/string-helpers.h"
 #include "config/keybind.h"
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 #include "config/libinput.h"
+#endif
 #include "config/mousebind.h"
 #include "config/rcxml.h"
 #include "labwc.h"
@@ -36,7 +38,9 @@ static bool in_regions;
 static bool in_usable_area_override;
 static bool in_keybind;
 static bool in_mousebind;
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 static bool in_libinput_category;
+#endif
 static bool in_window_switcher_field;
 static bool in_window_rules;
 static bool in_action_query;
@@ -46,7 +50,9 @@ static bool in_action_else_branch;
 static struct usable_area_override *current_usable_area_override;
 static struct keybind *current_keybind;
 static struct mousebind *current_mousebind;
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 static struct libinput_category *current_libinput_category;
+#endif
 static const char *current_mouse_context;
 static struct action *current_keybind_action;
 static struct action *current_mousebind_action;
@@ -425,6 +431,7 @@ fill_mousebind(char *nodename, char *content)
 	}
 }
 
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 static int
 get_accel_profile(const char *s)
 {
@@ -531,6 +538,7 @@ fill_libinput_category(char *nodename, char *content)
 			: LIBINPUT_CONFIG_DWT_DISABLED;
 	}
 }
+#endif
 
 static void
 set_font_attr(struct font *font, const char *nodename, const char *content)
@@ -648,9 +656,11 @@ entry(xmlNode *node, char *nodename, char *content)
 			fill_mousebind(nodename, content);
 		}
 	}
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	if (in_libinput_category) {
 		fill_libinput_category(nodename, content);
 	}
+#endif
 	if (in_regions) {
 		fill_region(nodename, content);
 		return;
@@ -859,12 +869,14 @@ xml_tree_walk(xmlNode *node)
 			in_mousebind = false;
 			continue;
 		}
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 		if (!strcasecmp((char *)n->name, "device")) {
 			in_libinput_category = true;
 			traverse(n);
 			in_libinput_category = false;
 			continue;
 		}
+#endif
 		if (!strcasecmp((char *)n->name, "regions")) {
 			in_regions = true;
 			traverse(n);
@@ -1262,11 +1274,13 @@ post_processing(void)
 	if (!rc.font_osd.name) {
 		rc.font_osd.name = xstrdup("sans");
 	}
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	if (!libinput_category_get_default()) {
 		/* So we still allow tap to click by default */
 		struct libinput_category *l = libinput_category_create();
 		assert(l && libinput_category_get_default() == l);
 	}
+#endif
 
 	int nr_workspaces = wl_list_length(&rc.workspace_config.workspaces);
 	if (nr_workspaces < rc.workspace_config.min_nr_workspaces) {
@@ -1466,12 +1480,14 @@ rcxml_finish(void)
 		zfree(m);
 	}
 
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	struct libinput_category *l, *l_tmp;
 	wl_list_for_each_safe(l, l_tmp, &rc.libinput_categories, link) {
 		wl_list_remove(&l->link);
 		zfree(l->name);
 		zfree(l);
 	}
+#endif
 
 	struct workspace *w, *w_tmp;
 	wl_list_for_each_safe(w, w_tmp, &rc.workspace_config.workspaces, link) {
@@ -1497,7 +1513,9 @@ rcxml_finish(void)
 	current_usable_area_override = NULL;
 	current_keybind = NULL;
 	current_mousebind = NULL;
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	current_libinput_category = NULL;
+#endif
 	current_mouse_context = NULL;
 	current_keybind_action = NULL;
 	current_mousebind_action = NULL;
diff --git a/src/input/keyboard.c b/src/input/keyboard.c
index 14b6864..fb6f787 100644
--- a/src/input/keyboard.c
+++ b/src/input/keyboard.c
@@ -1,7 +1,9 @@
 // SPDX-License-Identifier: GPL-2.0-only
 #include <assert.h>
 #include <wlr/backend/multi.h>
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 #include <wlr/backend/session.h>
+#endif
 #include <wlr/interfaces/wlr_keyboard.h>
 #include "action.h"
 #include "idle.h"
@@ -15,6 +17,7 @@
 
 static bool should_cancel_cycling_on_next_key_release;
 
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 static void
 change_vt(struct server *server, unsigned int vt)
 {
@@ -26,6 +29,7 @@ change_vt(struct server *server, unsigned int vt)
 		wlr_session_change_vt(session, vt);
 	}
 }
+#endif
 
 bool
 keyboard_any_modifiers_pressed(struct wlr_keyboard *keyboard)
@@ -288,6 +292,7 @@ handle_compositor_keybindings(struct keyboard *keyboard,
 	 */
 	bool handled = false;
 
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	/* Catch C-A-F1 to C-A-F12 to change tty */
 	if (event->state == WL_KEYBOARD_KEY_STATE_PRESSED) {
 		for (int i = 0; i < translated.nr_syms; i++) {
@@ -303,6 +308,7 @@ handle_compositor_keybindings(struct keyboard *keyboard,
 			}
 		}
 	}
+#endif
 
 	/*
 	 * Ignore labwc keybindings if input is inhibited
diff --git a/src/output.c b/src/output.c
index f7f95ab..d8dc7a5 100644
--- a/src/output.c
+++ b/src/output.c
@@ -10,7 +10,9 @@
 #include <assert.h>
 #include <strings.h>
 #include <wlr/types/wlr_buffer.h>
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 #include <wlr/types/wlr_drm_lease_v1.h>
+#endif
 #include <wlr/types/wlr_output.h>
 #include <wlr/types/wlr_xdg_output_v1.h>
 #include <wlr/types/wlr_scene.h>
@@ -95,10 +97,12 @@ new_output_notify(struct wl_listener *listener, void *data)
 	 * This is also useful for debugging the DRM parts of
 	 * another compositor.
 	 */
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	if (server->drm_lease_manager) {
 		wlr_drm_lease_v1_manager_offer_output(
 			server->drm_lease_manager, wlr_output);
 	}
+#endif
 
 	/*
 	 * Don't configure any non-desktop displays, such as VR headsets;
diff --git a/src/seat.c b/src/seat.c
index cc170da..2d4bc5b 100644
--- a/src/seat.c
+++ b/src/seat.c
@@ -2,7 +2,9 @@
 #include <assert.h>
 #include <stdbool.h>
 #include <strings.h>
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 #include <wlr/backend/libinput.h>
+#endif
 #include <wlr/types/wlr_input_device.h>
 #include <wlr/types/wlr_keyboard.h>
 #include <wlr/types/wlr_pointer.h>
@@ -45,6 +47,7 @@ is_touch_device(struct wlr_input_device *wlr_input_device)
 	return false;
 }
 
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 static void
 configure_libinput(struct wlr_input_device *wlr_input_device)
 {
@@ -165,6 +168,7 @@ configure_libinput(struct wlr_input_device *wlr_input_device)
 		libinput_device_config_dwt_set_enabled(libinput_dev, dc->dwt);
 	}
 }
+#endif
 
 static struct wlr_output *
 output_by_name(struct server *server, const char *name)
@@ -184,7 +188,9 @@ new_pointer(struct seat *seat, struct wlr_input_device *dev)
 {
 	struct input *input = znew(*input);
 	input->wlr_input_device = dev;
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	configure_libinput(dev);
+#endif
 	wlr_cursor_attach_input_device(seat->cursor, dev);
 
 	/* In support of running with WLR_WL_OUTPUTS set to >=2 */
@@ -237,7 +243,9 @@ new_touch(struct seat *seat, struct wlr_input_device *dev)
 {
 	struct input *input = znew(*input);
 	input->wlr_input_device = dev;
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	configure_libinput(dev);
+#endif
 	wlr_cursor_attach_input_device(seat->cursor, dev);
 
 	/* In support of running with WLR_WL_OUTPUTS set to >=2 */
@@ -453,7 +461,9 @@ seat_reconfigure(struct server *server)
 			configure_keyboard(input->wlr_input_device);
 			break;
 		case WLR_INPUT_DEVICE_POINTER:
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 			configure_libinput(input->wlr_input_device);
+#endif
 			break;
 		default:
 			break;
diff --git a/src/server.c b/src/server.c
index 29868e9..2501160 100644
--- a/src/server.c
+++ b/src/server.c
@@ -130,6 +130,7 @@ handle_input_disinhibit(struct wl_listener *listener, void *data)
 	seat_disinhibit_input(&server->seat);
 }
 
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 static void
 handle_drm_lease_request(struct wl_listener *listener, void *data)
 {
@@ -157,6 +158,7 @@ handle_drm_lease_request(struct wl_listener *listener, void *data)
 		output->leased = true;
 	}
 }
+#endif
 
 static bool
 server_global_filter(const struct wl_client *client, const struct wl_global *global, void *data)
@@ -244,7 +246,7 @@ server_init(struct server *server)
 	 * backend based on the current environment, such as opening an x11
 	 * window if an x11 server is running.
 	 */
-	server->backend = wlr_backend_autocreate(server->wl_display);
+	server->backend = wlr_backend_autocreate(server->wl_display, NULL);
 	if (!server->backend) {
 		wlr_log(WLR_ERROR, "unable to create backend");
 		fprintf(stderr, helpful_seat_error_message);
@@ -407,6 +409,7 @@ server_init(struct server *server)
 
 	session_lock_init(server);
 
+#if !defined (__ANDROID__) && !defined (__TERMUX__)
 	server->drm_lease_manager = wlr_drm_lease_v1_manager_create(
 		server->wl_display, server->backend);
 	if (server->drm_lease_manager) {
@@ -417,6 +420,7 @@ server_init(struct server *server)
 		wlr_log(WLR_DEBUG, "Failed to create wlr_drm_lease_device_v1");
 		wlr_log(WLR_INFO, "VR will not be available");
 	}
+#endif
 
 	server->output_power_manager_v1 =
 		wlr_output_power_manager_v1_create(server->wl_display);
